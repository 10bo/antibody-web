'use strict';
import * as AWS from 'aws-sdk';
import * as AWSMock from 'aws-sdk-mock';
import path from 'path';
// tests for upload
// Generated by serverless-jest-plugin
import * as mod from './upload';
import jestPlugin from 'serverless-jest-plugin';

require('dotenv').config();

// make aws-sdk mockable everywhere
AWSMock.setSDK(path.resolve(__dirname, '..', 'node_modules', 'aws-sdk'));

const lambdaWrapper = jestPlugin.lambdaWrapper;
const wrapped = lambdaWrapper.wrap(mod, { handler: 'handler' });

describe('upload', () => {
  it('should throw an error if no body.rdt_image is supplied ', async () => {
    const result = await wrapped.run({});

    expect(result).toMatchObject({
      body: expect.objectContaining({
        error: expect.stringMatching('Failed to decode'),
      }),
    });
  });

  it('should upload to the bucket provided in the env vars', async () => {
    const buffer = new Buffer('test');
    const mockUpload = jest.fn();
    AWSMock.mock('S3', 'upload', mockUpload);

    wrapped
      .run({
        body: JSON.stringify({
          rdt_image: 'R0lGODlhPQ==',
        }),
      })
      .then(() => {
        expect(mockUpload).toBeCalledWith(
          expect.objectContaining({
            Bucket: process.env.UPLOAD_BUCKET,
            Key: expect.any(String),
            Body: expect.any(Buffer),
          }),
          expect.anything()
        );

        AWSMock.restore();
      });
  });

  it('should upload the s3 key to a new record in a dynamo DB table given in env vars', async () => {
    const mockUpload = jest.fn().mockResolvedValue({
      Location: 'testlocation',
    });
    const mockDynamoPut = jest.fn();

    AWSMock.mock('S3', 'upload', mockUpload);
    AWSMock.mock('DynamoDB', 'putItem', mockDynamoPut);

    wrapped
      .run({
        body: JSON.stringify({
          rdt_image: 'R0lGODlhPQ==',
        }),
      })
      .then(() => {
        expect(mockDynamoPut).toBeCalledWith(
          expect.objectContaining({
            TableName: process.env.DYNAMO_TABLE,
            Item: expect.objectContaining({
              image_url: {
                S: 'testlocation',
              },
            }),
          }),
          expect.anything()
        );

        AWSMock.restore();
      });
  });
});
